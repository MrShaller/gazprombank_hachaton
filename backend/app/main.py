"""
–ì–ª–∞–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç–∑—ã–≤–æ–≤ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞
"""
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import logging
import sys
import traceback

from .config import settings
from .database import create_tables
from .routers import products, reviews, analytics, predict, aspects
from .routers.predict import get_pipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    stream=sys.stdout,
    force=True,
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="""
    üè¶ **API –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞**
    
    –≠—Ç–æ—Ç API –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞.
    
    ## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    * **–ü—Ä–æ–¥—É–∫—Ç—ã** - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤/—É—Å–ª—É–≥ —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π  
    * **–û—Ç–∑—ã–≤—ã** - —Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –ø–æ–∏—Å–∫)  
    * **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞** - –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π, –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Ä–µ–π—Ç–∏–Ω–≥–∏
    """,
    docs_url="/api/v1/docs",
    redoc_url="/api/v1/redoc"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
app.include_router(products.router, prefix="/api/v1/products", tags=["products"])
app.include_router(reviews.router, prefix="/api/v1/reviews", tags=["reviews"])
app.include_router(analytics.router, prefix="/api/v1/analytics", tags=["analytics"])
app.include_router(predict.router, prefix="/api/v1/predict", tags=["predict"])
app.include_router(aspects.router, prefix="/api/v1/aspects", tags=["aspects"])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exc}")
    logger.error(traceback.format_exc())
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "detail": str(exc) if settings.debug else "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        }
    )

# –°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ
@app.on_event("startup")
async def startup_event():
    logger.info(f"–ó–∞–ø—É—Å–∫ {settings.app_name} v{settings.app_version}")
    try:
        create_tables()
        logger.info("–¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –º–æ–¥–µ–ª–µ–π...")
    try:
        pipeline = get_pipeline()
        if pipeline is not None:
            logger.info("‚úÖ ML –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        else:
            logger.warning("‚ö†Ô∏è ML –º–æ–¥–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ML –º–æ–¥–µ–ª–µ–π: {e}")
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ ML –º–æ–¥–µ–ª–µ–π (fallback —Ä–µ–∂–∏–º)")

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç (–ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–∞–≤–∫–∞)
@app.get("/", tags=["root"])
async def root():
    return {
        "message": "üè¶ Gazprombank Reviews Dashboard API",
        "version": settings.app_version,
        "status": "running",
        "docs": "/api/v1/docs",
        "redoc": "/api/v1/redoc"
    }

# Healthcheck
@app.get("/api/v1/health", tags=["health"])
async def api_health_check():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π
    ml_status = "loaded" if get_pipeline() is not None else "fallback"
    
    return {
        "status": "healthy",
        "version": settings.app_version,
        "database": "connected",
        "ml_models": ml_status,
        "api": "v1"
    }

# Info endpoint
@app.get("/api/v1/info", tags=["info"])
async def api_info():
    return {
        "api_version": "v1",
        "app_name": settings.app_name,
        "app_version": settings.app_version,
        "endpoints": {
            "products": "/api/v1/products",
            "reviews": "/api/v1/reviews",
            "analytics": "/api/v1/analytics",
            "predict": "/api/v1/predict",
            "aspects": "/api/v1/aspects"
        }
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug,
        log_level="info"
    )

