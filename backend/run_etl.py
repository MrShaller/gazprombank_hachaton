#!/usr/bin/env python3
"""
–£–¥–æ–±–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ETL –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
"""
import os
import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.utils.etl_loader import ReviewETL
from app.utils.stats_builder import StatsBuilder


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='ETL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤')
    parser.add_argument(
        '--data-path', 
        default='/Users/mishantique/Desktop/Projects/gazprombank_hachaton/data/raw/banki_ru',
        help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å JSON —Ñ–∞–π–ª–∞–º–∏'
    )
    parser.add_argument(
        '--db-url',
        default='postgresql://postgres:postgres@localhost:5432/gazprombank_reviews',
        help='URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
    )
    parser.add_argument(
        '--skip-load',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö, —Ç–æ–ª—å–∫–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'
    )
    parser.add_argument(
        '--skip-stats',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    )
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ ETL –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫–∞")
    print(f"üìÅ –ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º: {args.data_path}")
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {args.db_url}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    if not args.skip_load and not Path(args.data_path).exists():
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.data_path}")
        sys.exit(1)
    
    success = True
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not args.skip_load:
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤...")
        etl = ReviewETL(args.db_url)
        stats = etl.load_all_json_files(args.data_path)
        
        if stats['errors'] > 0:
            print(f"‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å {stats['errors']} –æ—à–∏–±–∫–∞–º–∏")
            success = False
        else:
            print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if not args.skip_stats:
        print("\nüìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        builder = StatsBuilder(args.db_url)
        stats = builder.build_daily_stats()
        
        if stats['errors'] > 0:
            print(f"‚ö†Ô∏è  –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å {stats['errors']} –æ—à–∏–±–∫–∞–º–∏")
            success = False
        else:
            print("‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
        print("\nüìà –°–≤–æ–¥–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º:")
        builder.print_summary()
    
    if success:
        print("\nüéâ ETL –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        sys.exit(0)
    else:
        print("\n‚ùå ETL –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)


if __name__ == "__main__":
    main()
