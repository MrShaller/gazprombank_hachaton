#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å –Ω—É–∂–Ω—ã–º URL
"""

from interactive_parser import InteractiveGazprombankParser

def main():
    url = "https://www.sravni.ru/bank/gazprombank/obsluzhivanie/otzyvy/?orderby=byDate"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä "–í—Å–µ" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'filterby=all' not in url:
        separator = '&' if '?' in url else '?'
        url = f"{url}{separator}filterby=all"
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä '–í—Å–µ': {url}")
    
    parser = InteractiveGazprombankParser(headless=False)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä
    
    try:
        print("\n‚úÖ –†—É—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä + –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç + —Ä–µ–π—Ç–∏–Ω–≥–∏")
        print()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
        reviews, filename = parser.parse_all_reviews(url)
        
        if reviews:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            saved_path = parser.save_reviews(reviews, filename)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\nüéâ –ü–ê–†–°–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìä –°–æ–±—Ä–∞–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")
            
            if reviews:
                lengths = [len(r['review_text']) for r in reviews]
                avg_length = sum(lengths) / len(lengths)
                
                # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
                dates_found = len([r for r in reviews if r.get('review_date')])
                dates_percentage = (dates_found / len(reviews)) * 100
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
                ratings_found = len([r for r in reviews if r.get('rating') is not None])
                ratings_percentage = (ratings_found / len(reviews)) * 100
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
                rating_distribution = {}
                tonality_distribution = {}
                
                for review in reviews:
                    rating = review.get('rating')
                    tonality = review.get('tonality')
                    
                    if rating is not None:
                        rating_distribution[rating] = rating_distribution.get(rating, 0) + 1
                    
                    if tonality:
                        tonality_distribution[tonality] = tonality_distribution.get(tonality, 0) + 1
                
                print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                print(f"   üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–∑—ã–≤–∞: {avg_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üìö –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤: {max(lengths)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üìÑ –°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∑—ã–≤: {min(lengths)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"   üìÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç: {dates_found}/{len(reviews)} ({dates_percentage:.1f}%)")
                print(f"   ‚≠ê –ù–∞–π–¥–µ–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {ratings_found}/{len(reviews)} ({ratings_percentage:.1f}%)")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞—Ç
                sample_dates = [r.get('review_date') for r in reviews[:5] if r.get('review_date')]
                if sample_dates:
                    print(f"   üìÖ –ü—Ä–∏–º–µ—Ä—ã –¥–∞—Ç: {', '.join(sample_dates[:3])}")
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
                if rating_distribution:
                    print(f"\n‚≠ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ô–¢–ò–ù–ì–û–í:")
                    for rating in sorted(rating_distribution.keys()):
                        count = rating_distribution[rating]
                        percentage = (count / len(reviews)) * 100
                        print(f"   {rating} –∑–≤—ë–∑–¥: {count} –æ—Ç–∑—ã–≤–æ–≤ ({percentage:.1f}%)")
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                if tonality_distribution:
                    print(f"\nüòä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–û–ù–ê–õ–¨–ù–û–°–¢–ò:")
                    for tonality in ['–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ', '–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ']:
                        count = tonality_distribution.get(tonality, 0)
                        if count > 0:
                            percentage = (count / len(reviews)) * 100
                            print(f"   {tonality.capitalize()}: {count} –æ—Ç–∑—ã–≤–æ–≤ ({percentage:.1f}%)")
            
            if saved_path:
                print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {saved_path}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –æ—Ç–∑—ã–≤—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        parser.close()

if __name__ == "__main__":
    main()

