import re
from typing import List

# ---------- Общие утилиты ----------
def _compile_any(parts: List[str], word_boundary: bool = False, case_insensitive: bool = True) -> re.Pattern:
    """Компилирует список паттернов в один regex через |. Части принимаются как regex (не экранируем)."""
    body = "|".join(parts)
    if word_boundary:
        body = rf"\b(?:{body})\b"
    flags = re.IGNORECASE if case_insensitive else 0
    return re.compile(body, flags)

# ---------- Словари ----------

QUEUE_POS_GUARD = _compile_any([
    r"(быстрая|небольшая|короткая)\s+очеред[ьи]",
    r"очеред[ьи]\s+(не\s+)?большая",
], word_boundary=False)

# Общий позитивный маркер "без проблем" (может отменять локальные негативные стемы)
NO_PROBLEM_GUARD = re.compile(r"\bбез\s+проблем\b", re.IGNORECASE)

# Короткие ПОЛОЖИТЕЛЬНЫЕ слова/стемы (обобщающие признаки)
POS_WORDS = _compile_any([
    r"спасибо", r"благодарю", r"признател[еь]н", r"внимательное отношение",
    r"довол[еь]н", r"рекомендую", r"понравил\w*",
    r"вежлив\w*", r"тактич\w*", r"приветлив\w*", r"доброжелател\w*",
    r"компетент\w*", r"сообразител\w*", r"вежлив\w*",
    r"оперативн\w*", r"быстр(о|ее)\b", r"эффективн\w*", r"качественн\w*",
    r"на\s+высшем\s+уровне", r"максимально\s+эффективн\w*",
    r"удобн\w*", r"понятн\w*",
    r"помог(?!ать)\w*", r"решил(?!ать)\w*", r"разъяснил\w*", r"объяснил\w*",
    r"здорово", r"радует", r"отличн\w*", r"замечательн\w*",
    r"внимател\w+\s+отношен\w*", r"приятн\w*", r"ни\s+уведомлени[яй],?\s+ни\s+предупреждени[яй]",
], word_boundary=True)

# Короткие ОТРИЦАТЕЛЬНЫЕ слова/стемы (обобщающие признаки)
NEG_WORDS = _compile_any([
    r"ужас\w*", r"отвратител\w*", r"кошмар\w*", r"позор\w*",
    r"плох\w*", r"неудобн\w*", r"некомпетент\w*", r"хамоват\w*", r"невежлив\w*",
    r"проблем\w*", r"ошибк\w*", r"отказ\w*", r"жалоб\w*",
    r"неработа\w*", r"завис(л|ает)\b", r"блокир\w*", r"блокиров\w*",
    r"заблокирован\w*", r"задержк\w*", r"зависл\w*",
    r"очеред\w*", r"ожидан\w*", r"долго\w*", r"долгий",
    r"недоступн\w*", r"не\s+дозвон\w*", r"не\s+могу\s+войти", r"не\s+могу\s+достучаться",
    r"списан\w*", r"просроч\w*", r"штраф\w*",
    r"бесполезн\w*",
    # твои кейсы:
    r"никаких\s+подвижек", r"сертификат\s+не\s+получил\w*",
    r"навяз(али|ывают)\w*", r"не\s+рекомендую",
    r"получил\s+блокировк\w*",
], word_boundary=False)

# Конкретные ПОЛОЖИТЕЛЬНЫЕ фразы
POS_PHRASES = _compile_any([
    r"всегда\s+можно\s+получить\s+поддержку",
    r"хочу\s+выразить\s+(огромную\s+)?благодарност\w*",
    r"нет\s+никаких\s+проблем",
    r"обстоятельно\s+рассказал[аио]?",
    r"доставк\w+\s+довол[еы]н[а]?",
    r"она\s+большая\s+молодец",
    r"без\s+проблем",
    r"(быстрая|небольшая|короткая)\s+очеред[ьи]",
    r"открыти[ея]\s+сч[её]та?.*без\s+проблем",
    r"(получени[ея]|выдач[аи])\s+карт[ыы]?.*без\s+проблем",
    r"банкомат.*без\s+проблем",
    r"побольше\s+бы\s+таких\s+сотрудников",
    r"объяснил[аио]?\s+про\s+кэшб[еэ]к",
    r"качество\s+обслуживания\s+осталось\s+на\s+высшем\s+уровне",
    r"приехал[аио]?\s+вовремя",
    r"информация\s+преподносилась\s+своевременно\s+и\s+в\s+полном\s+объ[ее]ме",
    r"хочу\s+отметить\s+качественную?\s+работу",
    r"были\s+даны\s+советы\s+как\s+лучше",
    r"грамотно\s+и\s+доходчиво\s+объяснил[аио]?",
    r"это\s+очень\s+радует", r"как\s+раз\s+хотел\s+открыть\s+сч[её]т",
], word_boundary=False)

# Конкретные ОТРИЦАТЕЛЬНЫЕ фразы (включая твои)
NEG_PHRASES = _compile_any([
    r"им\s+главное\s+навязать\s+свои\s+услуги",
    r"отвратительный\s+банк( и обслуживание)?",
    r"хамоватые\s+не\s+грамотные",
    r"ни\s+уведомлени[яй],?\s+ни\s+предупреждени[яй]",
    r"занавес\.?",                                  
    r"у\s+меня\s+пропал[аио]?",                    
    r"балл[ыы]\s+сгорел[аио]?",
    r"ничего\s+не\s+верн[её]м",                    
    r"средства\s+на\s+указанн[ыйое]\s+мной\s+сч[её]т\s+до\s+сих\s+пор\s+не\s+поступил[аио]?",
    r"грубо\s+нарушает?\s+положени[яй]",
    r"была\s+дана\s+недостоверная\s+информаци[яи]",
    r"раньше\s+срока\s+окончани[яй]",
    r"донести\s+до\s+руководств[ао]",
    r"не\s+кому\s+не\s+советую",
    r"приложение\s+для\s+айфона\s+нету",
    r"обратитесь\s+в\s+другой\s+офис\s+или\s+закажите\s+доставку",
    r"вы\s+мне\s+отказыва[её]тесь?\s+в\s+получении\s+дебетовой\s+карты",
    r"уже\s+два\s+месяца\s+банк\s+не\s+может\s+закрыть\s+сч[её]т\s+и\s+перевести\s+остаток\s+дс",
    r"каждый\s+раз\s+необходимо\s+обращаться\s+в\s+офис\s+банка",
    r"не\s+пишет\s+причину.*в\s+офисе\s+ничего\s+не\s+знают",
    r"банк\s+удерживает\s+мои\s+собственные\s+средства",
    r"заблокировав\s+перевод\s+между\s+моими\s+же\s+сч[её]тами",
    r"никакого\s+уведомления\s+о\s+блокировке\s+я\s+не\s+получил[аио]?",
    r"при\s+закрытии\s+сч[её]та\s+банк\s+не\s+сможет\s+перевести\s+деньги\s+на\s+другой\s+сч[её]т",
    r"и\s+снять\s+наличные\s+невозможно,\s*и\s+перевести\s+средства\s+на\s+другой\s+сч[её]т\s+невозможно",
    r"грубо\s+нарушают\s+ст\.?", r"некомпетентны\s+в\s+работе\s+операторы\s+контактного\s+центра",
    r"никто\s+не\s+может\s+помочь", r"никто\s+не\s+может\.", r"дальше\s*\-\s*тишина",
    r"двухчасова(я|я)\s+очередь",  # капс обработаем отдельно как усилитель
    r"карту\s+мне\s+никто\s+не\s+выдал", r"она\s+в\s+статусе\s+«?заблокирована»?",
    r"крайне\s+разочарован(а)?\s+обслуживани(ем|ем)",
    r"особенно\s+неприятно",
    r"считаю\s+такой\s+опыт\s+крайне\s+негативным\s+и\s+не\s+рекомендую\s+банк",
    r"а\s+она\s+платная",  # капс усилит
    r"у\s+этого\s+банка\s+самая\s+ужасная\s+и\s+медленная",
    r"приложение\s+неудобное\s+и\s+непонятное", r"вечно\s+тупит",
    r"ни\s+подтверждения\s+получения\s+пояснений.*не\s+принятия\s+их\s+в\s+работу",
    # Частые «универсальные» негативные конструкции:
    r"ничего\s+не\s+реш(ил[аио]?|ает|илось)",
    r"не\s+помог(ло|ли)",
    r"заблокировали\s+на\s*\d+\s*час(ов|а)?",
    r"ваши\s+деньг[иа]\s+в\s+этом\s+банке\s+могут\s+просто\s+заблокировать",
    r"как\s+указано\s*\(оказывается\)\s*в\s+договоре",
    r"оказывается[, ]*\s*в\s+договоре",
    r"как\s+оказалось[, ]*\s*в\s+договоре",
], word_boundary=False)

# Интенсификаторы
INTENS_POS = _compile_any([r"очень", r"крайне", r"супер", r"максимально"], word_boundary=True)
INTENS_NEG = _compile_any([r"ужасн\w*", r"кошмарн\w*", r"катастроф\w*", r"отвратительн\w*"], word_boundary=False)

# Контраст в начале клаузы
CONTRAST_START = re.compile(r"^\s*(но|однако|хотя|зато|при этом|с другой стороны)\b", re.IGNORECASE)

# Инверсия "не ..." — обработаем внутри POS/NEG подсчёта
NE = re.compile(r"\bне\b", re.IGNORECASE)
NEPLOHO = re.compile(r"\bнеплохо\b", re.IGNORECASE)

# Исключения (самоирония и нерелевантный «негатив»)
NEG_EXCLUDE = _compile_any([r"косяк\w*", r"подтуплива\w*"], word_boundary=True)

# ---------- Подсчёты ----------

def _tokens(text: str) -> List[str]:
    return re.findall(r"\w+|[^\w\s]", text.lower(), flags=re.UNICODE)

def _count_with_negation(text: str, pat: re.Pattern, win: int = 3, negative: bool = False) -> int:
    """
    Считает совпадения pat с грубым учётом 'не' в окне слева.
    Возвращает +1 за POS, -1 за NEG.
    """
    t = text.lower()
    toks = _tokens(t)
    not_idx = [i for i, tok in enumerate(toks) if tok == "не"]
    score = 0
    for m in pat.finditer(t):
        span = m.group(0)
        # исключения для негатива
        if negative and NEG_EXCLUDE.search(span):
            continue

        if negative:
            # самоирония и несущественный «негатив»
            if NEG_EXCLUDE.search(span):
                continue
            # «очередь» в позитивном контексте — не считаем негативом
            if "очеред" in span and QUEUE_POS_GUARD.search(t):
                continue
            # общий «без проблем» может отменить слабый локальный негатив
            if NO_PROBLEM_GUARD.search(t) and re.search(r"(очеред|банкомат|карт|сч[её]т)", span):
                continue

        words = re.findall(r"\w+", span)
        if not words:
            continue
        try:
            j = toks.index(words[0])
        except ValueError:
            j = -1
        has_not = any(j - win <= ni < j for ni in not_idx)

        if not negative:
            # POS
            if NEPLOHO.search(t):
                score += 2
            elif has_not:
                score += 0
            else:
                score += 2
        else:
            # NEG
            score -= 2
    return score

def _caps_emphasis(text: str) -> float:
    """Усиление за КАПС-эмоции (например, ДВУХЧАСОВАЯ ОЧЕРЕДЬ)."""
    words = re.findall(r"[A-ZА-ЯЁ]{4,}", text)
    # маленькое ограничение, чтобы не штрафовать аббревиатуры
    return min(1.0, 0.1 * len(words))  # до -1.0 максимум в минус, если много капса негативного контента

def _exclaim_emphasis(text: str) -> float:
    """Усиление за количество '!': 1-3 знака дают до ±0.3-0.5."""
    n = text.count("!")
    if n == 0:
        return 0.0
    return min(0.5, 0.15 * n)

# ---------- Главная функция ----------

def score_clause(text: str) -> float:
    """
    Возвращает числовой скор клаузы (обычно в диапазоне ~[-3, +3]).
    Плюс — позитив, минус — негатив.
    """
    t = (text or "").strip()
    if not t:
        return 0.0

    s = 0.0

    # 1) Обобщающие слова
    s += _count_with_negation(t, POS_WORDS, win=3, negative=False)
    s += _count_with_negation(t, NEG_WORDS, win=3, negative=True)

    # 2) Конкретные фразы (без инверсии, они обычно уже содержат её)
    if POS_PHRASES.search(t):
        s += 2.0
    if NEG_PHRASES.search(t):
        s -= 2.0

    # 3) Интенсификаторы
    if INTENS_POS.search(t):
        s += 0.4
    if INTENS_NEG.search(t):
        s -= 0.4

    # 4) Контраст в начале — чаще несёт “но … (скорее про негатив)”
    if CONTRAST_START.search(t):
        s -= 0.5

    # 5) Эмоциональные маркеры: КАПС + восклицания
    s += _exclaim_emphasis(t)
    s -= _caps_emphasis(t)  # чаще капс в негативе; если хочешь — делай условно от NEG_PHRASES

    return s
