#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å Ollama

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama –∏ –º–æ–¥–µ–ª–∏, —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö.
"""

import subprocess
import json
import time
from label_clauses_ollama import OllamaClauseLabeler
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_ollama():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
    try:
        result = subprocess.run(['ollama', 'list'], capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            logger.info("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞")
            logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            logger.info(result.stdout)
            return True
        else:
            logger.error("‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
    except FileNotFoundError:
        logger.error("‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return False
    except subprocess.TimeoutExpired:
        logger.error("‚ùå Timeout –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Ollama")
        return False

def test_model(model_name: str = "llama3.1:8b-instruct-q8_0"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ"""
    try:
        logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å {model_name}...")
        
        test_prompt = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ: —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?"
        
        result = subprocess.run(
            ['ollama', 'run', model_name],
            input=test_prompt,
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç:")
            logger.info(f"–û—Ç–≤–µ—Ç: {result.stdout.strip()}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error("‚ùå Timeout –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_clause_labeling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–ª–∞—É–∑"""
    test_cases = [
        {
            "clause": "–û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤–µ–∂–ª–∏–≤—ã–µ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–µ.",
            "context": "–ü—Ä–∏—à–µ–ª –≤ –±–∞–Ω–∫ —Ä–µ—à–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å –∫—Ä–µ–¥–∏—Ç–æ–º. –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–∏, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤–µ–∂–ª–∏–≤—ã–µ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–µ. –í—Å–µ –±—ã—Å—Ç—Ä–æ –æ—Ñ–æ—Ä–º–∏–ª–∏, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        },
        {
            "clause": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–≤–∏—Å–∞–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è!",
            "context": "–°–∫–∞—á–∞–ª –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞. –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∑–∞–≤–∏—Å–∞–µ—Ç, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –∏–¥—Ç–∏ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ."
        },
        {
            "clause": "–í–∑—è–ª –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç –ø–æ–¥ 12%, —É—Å–ª–æ–≤–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ, –æ–¥–æ–±—Ä–∏–ª–∏ –±—ã—Å—Ç—Ä–æ.",
            "context": "–ù—É–∂–Ω–∞ –±—ã–ª–∞ –º–∞—à–∏–Ω–∞ —Å—Ä–æ—á–Ω–æ. –í–∑—è–ª –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç –ø–æ–¥ 12%, —É—Å–ª–æ–≤–∏—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ, –æ–¥–æ–±—Ä–∏–ª–∏ –±—ã—Å—Ç—Ä–æ. –í —Ü–µ–ª–æ–º –¥–æ–≤–æ–ª–µ–Ω."
        },
        {
            "clause": "–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è.",
            "context": "–ü–æ–ª—å–∑—É—é—Å—å –¥–µ–±–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π —É–∂–µ –≥–æ–¥. –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è. –î—É–º–∞—é –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Å—á–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π –±–∞–Ω–∫."
        },
        {
            "clause": "–í–∫–ª–∞–¥ –æ—Ç–∫—Ä—ã–ª –Ω–∞ –≥–æ–¥ –ø–æ–¥ 8%.",
            "context": "–†–µ—à–∏–ª –æ—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π. –í–∫–ª–∞–¥ –æ—Ç–∫—Ä—ã–ª –Ω–∞ –≥–æ–¥ –ø–æ–¥ 8%. –ü–æ–∫–∞ –¥–æ–≤–æ–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π."
        }
    ]
    
    try:
        logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞—É–∑...")
        labeler = OllamaClauseLabeler()
        
        for i, test_case in enumerate(test_cases, 1):
            logger.info(f"\n--- –¢–µ—Å—Ç {i}/5 ---")
            logger.info(f"–ö–ª–∞—É–∑–∞: {test_case['clause']}")
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {test_case['context'][:100]}...")
            
            start_time = time.time()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            prompt = labeler.create_prompt(test_case['clause'], test_case['context'])
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            llm_response = labeler.call_ollama(prompt)
            
            end_time = time.time()
            processing_time = end_time - start_time
            
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {llm_response['topics']} | {llm_response['sentiments']}")
            logger.info(f"–†–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(llm_response['topics']) == len(llm_response['sentiments'])}")
            logger.info(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
        
        logger.info("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞–∑–º–µ—Ç–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –†–ê–ó–ú–ï–¢–ö–ò –ö–õ–ê–£–ó")
    logger.info("=" * 50)
    
    success = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Ollama
    if not check_ollama():
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama: https://ollama.ai/")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    if not test_model():
        logger.error("–ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: ollama pull llama3:8b-instruct")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    if not test_clause_labeling():
        success = False
    
    if success:
        logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        logger.info("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
        logger.info("python scripts/labeling/label_clauses_ollama.py")
    else:
        logger.error("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•")
    
    return success

if __name__ == "__main__":
    main()
